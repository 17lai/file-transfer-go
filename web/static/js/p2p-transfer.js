// P2PÊñá‰ª∂‰º†ËæìÁ≥ªÁªü
// ÂÖ®Â±ÄÂèòÈáè
let websocket = null;
let peerConnection = null;
let dataChannel = null;
let selectedFiles = [];
let currentPickupCode = '';
let currentRole = ''; // 'sender' or 'receiver'
let fileTransfers = new Map(); // Â≠òÂÇ®Êñá‰ª∂‰º†ËæìÁä∂ÊÄÅ
let isP2PConnected = false; // P2PËøûÊé•Áä∂ÊÄÅ
let isConnecting = false; // ÊòØÂê¶Ê≠£Âú®ËøûÊé•‰∏≠
let connectionTimeout = null; // ËøûÊé•Ë∂ÖÊó∂ÂÆöÊó∂Âô®

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    initializeEventListeners();
});

// ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨Âô®
function initializeEventListeners() {
    // Êñá‰ª∂ÈÄâÊã©‰∫ã‰ª∂
    document.getElementById('fileInput').addEventListener('change', handleFileSelect);
    
    // Âèñ‰ª∂Á†ÅËæìÂÖ•‰∫ã‰ª∂
    document.getElementById('pickupCodeInput').addEventListener('input', (e) => {
        e.target.value = e.target.value.toUpperCase();
        if (e.target.value.length === 6) {
            // Ëá™Âä®ËøûÊé•
            setTimeout(() => joinRoom(), 100);
        }
    });
    
    // ÊãñÊãΩ‰∏ä‰º†
    setupDragAndDrop();
}

// ËÆæÁΩÆÊãñÊãΩ‰∏ä‰º†
function setupDragAndDrop() {
    const dropArea = document.querySelector('.border-dashed');
    dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.classList.add('border-blue-400');
    });
    
    dropArea.addEventListener('dragleave', () => {
        dropArea.classList.remove('border-blue-400');
    });
    
    dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.classList.remove('border-blue-400');
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            selectedFiles = files;
            displaySelectedFiles();
        }
    });
}

// Â§ÑÁêÜÊñá‰ª∂ÈÄâÊã©
function handleFileSelect(event) {
    const files = Array.from(event.target.files);
    if (files.length > 0) {
        selectedFiles = files;
        displaySelectedFiles();
    }
}

// ÊòæÁ§∫ÈÄâ‰∏≠ÁöÑÊñá‰ª∂
function displaySelectedFiles() {
    const container = document.getElementById('selectedFiles');
    const filesList = document.getElementById('filesList');
    
    if (selectedFiles.length === 0) {
        container.classList.add('hidden');
        return;
    }
    
    container.classList.remove('hidden');
    filesList.innerHTML = '';
    
    selectedFiles.forEach((file, index) => {
        const fileItem = document.createElement('div');
        fileItem.className = 'flex items-center justify-between bg-gray-50 p-3 rounded-lg';
        fileItem.innerHTML = `
            <div class="flex items-center">
                <span class="text-2xl mr-3">${getFileIcon(file.type)}</span>
                <div>
                    <div class="font-medium">${file.name}</div>
                    <div class="text-sm text-gray-500">${formatFileSize(file.size)}</div>
                </div>
            </div>
            <button onclick="removeFile(${index})" class="text-red-500 hover:text-red-700 p-1">
                ‚ùå
            </button>
        `;
        filesList.appendChild(fileItem);
    });
}

// ÁßªÈô§Êñá‰ª∂
function removeFile(index) {
    selectedFiles.splice(index, 1);
    displaySelectedFiles();
}

// ÁîüÊàêÂèñ‰ª∂Á†Å
async function generatePickupCode() {
    if (selectedFiles.length === 0) return;
    
    // ÂáÜÂ§áÊñá‰ª∂‰ø°ÊÅØ
    const fileInfos = selectedFiles.map((file, index) => ({
        id: 'file_' + index,
        name: file.name,
        size: file.size,
        type: file.type,
        lastModified: file.lastModified
    }));
    
    try {
        const response = await fetch('/api/create-room', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ files: fileInfos })
        });
        
        const data = await response.json();
        if (data.success) {
            currentPickupCode = data.code;
            currentRole = 'sender';
            showPickupCode(data.code);
            connectWebSocket();
        } else {
            alert('ÁîüÊàêÂèñ‰ª∂Á†ÅÂ§±Ë¥•: ' + data.message);
        }
    } catch (error) {
        console.error('ÁîüÊàêÂèñ‰ª∂Á†ÅÂ§±Ë¥•:', error);
        alert('ÁîüÊàêÂèñ‰ª∂Á†ÅÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
}

// ÊòæÁ§∫Âèñ‰ª∂Á†Å
function showPickupCode(code) {
    document.getElementById('pickupCodeDisplay').textContent = code;
    document.getElementById('pickupCodeSection').classList.remove('hidden');
    document.getElementById('generateCodeBtn').classList.add('hidden');
}

// Â§çÂà∂Âèñ‰ª∂Á†Å
function copyPickupCode() {
    navigator.clipboard.writeText(currentPickupCode).then(() => {
        alert('Âèñ‰ª∂Á†ÅÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø');
    });
}

// ÈáçÁΩÆÂèëÈÄÅÊñπ
function resetSender() {
    selectedFiles = [];
    currentPickupCode = '';
    currentRole = '';
    if (websocket) {
        websocket.close();
    }
    
    document.getElementById('selectedFiles').classList.add('hidden');
    document.getElementById('pickupCodeSection').classList.add('hidden');
    document.getElementById('generateCodeBtn').classList.remove('hidden');
    document.getElementById('fileInput').value = '';
}

// Âä†ÂÖ•ÊàøÈó¥
async function joinRoom() {
    const code = document.getElementById('pickupCodeInput').value.trim();
    if (code.length !== 6) {
        alert('ËØ∑ËæìÂÖ•6‰ΩçÂèñ‰ª∂Á†Å');
        return;
    }
    
    try {
        const response = await fetch(`/api/room-info?code=${code}`);
        const data = await response.json();
        
        if (data.success) {
            currentPickupCode = code;
            currentRole = 'receiver';
            displayReceiverFiles(data.files);
            connectWebSocket();
        } else {
            alert(data.message);
        }
    } catch (error) {
        console.error('ËøûÊé•Â§±Ë¥•:', error);
        alert('ËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Âèñ‰ª∂Á†ÅÊòØÂê¶Ê≠£Á°Æ');
    }
}

// ÊòæÁ§∫Êé•Êî∂ÊñπÊñá‰ª∂ÂàóË°®
function displayReceiverFiles(files) {
    document.getElementById('codeInputSection').classList.add('hidden');
    document.getElementById('receiverFilesSection').classList.remove('hidden');
    
    const filesList = document.getElementById('receiverFilesList');
    filesList.innerHTML = '';
    
    files.forEach((file, index) => {
        const fileItem = document.createElement('div');
        fileItem.className = 'flex items-center justify-between bg-gray-50 p-3 rounded-lg';
        fileItem.innerHTML = `
            <div class="flex items-center">
                <span class="text-2xl mr-3">${getFileIcon(file.type)}</span>
                <div>
                    <div class="font-medium">${file.name}</div>
                    <div class="text-sm text-gray-500">${formatFileSize(file.size)}</div>
                </div>
            </div>
            <button onclick="downloadFile('${file.id}')" disabled 
                    class="bg-blue-500 text-white px-4 py-2 rounded font-semibold opacity-50 cursor-not-allowed">
                üì• ‰∏ãËΩΩ
            </button>
        `;
        filesList.appendChild(fileItem);
    });
    
    // ÂàùÂßãÂåñÊó∂ÊòæÁ§∫Ê≠£Âú®Âª∫Á´ãËøûÊé•Áä∂ÊÄÅ
    updateP2PStatus(false);
}

// Â∑•ÂÖ∑ÂáΩÊï∞
function getFileIcon(mimeType) {
    if (mimeType.startsWith('image/')) return 'üñºÔ∏è';
    if (mimeType.startsWith('video/')) return 'üé•';
    if (mimeType.startsWith('audio/')) return 'üéµ';
    if (mimeType.includes('pdf')) return 'üìÑ';
    if (mimeType.includes('zip') || mimeType.includes('rar')) return 'üì¶';
    return 'üìÑ';
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// È°µÈù¢Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
window.addEventListener('beforeunload', () => {
    if (websocket) {
        websocket.close();
    }
    if (peerConnection) {
        peerConnection.close();
    }
});
